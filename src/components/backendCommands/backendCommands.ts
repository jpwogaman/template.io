
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async listAllFileitemsAndRelationsForJsonExport() : Promise<FullTrackListForExport> {
    return await TAURI_INVOKE("list_all_fileitems_and_relations_for_json_export");
},
async listAllFileitemsAndRelationCounts() : Promise<FullTrackWithCounts[]> {
    return await TAURI_INVOKE("list_all_fileitems_and_relation_counts");
},
async getFileitemAndRelations(id: string) : Promise<FullTrackForExport | null> {
    return await TAURI_INVOKE("get_fileitem_and_relations", { id });
},
async createFileitem(count: number) : Promise<void> {
    await TAURI_INVOKE("create_fileitem", { count });
},
async clearFileitem(id: string) : Promise<void> {
    await TAURI_INVOKE("clear_fileitem", { id });
},
async renumberAllFileitems() : Promise<FileItem[]> {
    return await TAURI_INVOKE("renumber_all_fileitems");
},
async deleteFileitemAndRelations(id: string) : Promise<void> {
    await TAURI_INVOKE("delete_fileitem_and_relations", { id });
},
async updateFileitem(data: FileItemRequest) : Promise<void> {
    await TAURI_INVOKE("update_fileitem", { data });
},
async createFullRange(fileitemsItemId: string, count: number) : Promise<void> {
    await TAURI_INVOKE("create_full_range", { fileitemsItemId, count });
},
async deleteFullRangeByFileitem(id: string, fileitemsItemId: string) : Promise<void> {
    await TAURI_INVOKE("delete_full_range_by_fileitem", { id, fileitemsItemId });
},
async updateFullRange(data: ItemsFullRangesRequest) : Promise<void> {
    await TAURI_INVOKE("update_full_range", { data });
},
async createFad(fileitemsItemId: string, count: number) : Promise<void> {
    await TAURI_INVOKE("create_fad", { fileitemsItemId, count });
},
async deleteFadByFileitem(id: string, fileitemsItemId: string) : Promise<void> {
    await TAURI_INVOKE("delete_fad_by_fileitem", { id, fileitemsItemId });
},
async updateFad(data: ItemsFadListRequest) : Promise<void> {
    await TAURI_INVOKE("update_fad", { data });
},
async createArtTog(fileitemsItemId: string, count: number) : Promise<void> {
    await TAURI_INVOKE("create_art_tog", { fileitemsItemId, count });
},
async deleteArtTogByFileitem(id: string, fileitemsItemId: string) : Promise<void> {
    await TAURI_INVOKE("delete_art_tog_by_fileitem", { id, fileitemsItemId });
},
async updateArtTog(data: ItemsArtListTogRequest) : Promise<void> {
    await TAURI_INVOKE("update_art_tog", { data });
},
async createArtTap(fileitemsItemId: string, count: number) : Promise<void> {
    await TAURI_INVOKE("create_art_tap", { fileitemsItemId, count });
},
async deleteArtTapByFileitem(id: string, fileitemsItemId: string) : Promise<void> {
    await TAURI_INVOKE("delete_art_tap_by_fileitem", { id, fileitemsItemId });
},
async updateArtTap(data: ItemsArtListTapRequest) : Promise<void> {
    await TAURI_INVOKE("update_art_tap", { data });
},
async createArtLayer(fileitemsItemId: string, count: number) : Promise<void> {
    await TAURI_INVOKE("create_art_layer", { fileitemsItemId, count });
},
async deleteArtLayerByFileitem(id: string, fileitemsItemId: string) : Promise<void> {
    await TAURI_INVOKE("delete_art_layer_by_fileitem", { id, fileitemsItemId });
},
async updateArtLayer(data: ItemsArtLayersRequest) : Promise<void> {
    await TAURI_INVOKE("update_art_layer", { data });
},
async getSettings() : Promise<Settings> {
    return await TAURI_INVOKE("get_settings");
},
async setSettings(settings: Settings) : Promise<void> {
    await TAURI_INVOKE("set_settings", { settings });
}
}

/** user-defined events **/



/** user-defined constants **/



/** user-defined types **/

export type FileItem = { id: string; locked: boolean; name: string; notes: string; channel: number; base_delay: number; avg_delay: number; vep_out: string; vep_instance: string; smp_number: string; smp_out: string; color: string }
export type FileItemRequest = { id: string; locked?: boolean | null; name?: string | null; notes?: string | null; channel?: number | null; base_delay?: number | null; avg_delay?: number | null; vep_out?: string | null; vep_instance?: string | null; smp_number?: string | null; smp_out?: string | null; color?: string | null }
export type FileMetadata = { file_name: string; file_created_date: string }
export type FullTrackCounts = { art_list_tog: number; art_list_tap: number; art_layers: number; fad_list: number; full_ranges: number }
export type FullTrackForExport = ({ id: string; locked: boolean; name: string; notes: string; channel: number; base_delay: number; avg_delay: number; vep_out: string; vep_instance: string; smp_number: string; smp_out: string; color: string }) & { full_ranges: ItemsFullRanges[]; fad_list: ItemsFadList[]; art_list_tog: ItemsArtListTog[]; art_list_tap: ItemsArtListTap[]; art_layers: ItemsArtLayers[] }
export type FullTrackListForExport = { file_meta_data: FileMetadata; items: FullTrackForExport[] }
export type FullTrackWithCounts = ({ id: string; locked: boolean; name: string; notes: string; channel: number; base_delay: number; avg_delay: number; vep_out: string; vep_instance: string; smp_number: string; smp_out: string; color: string }) & { _count: FullTrackCounts }
export type ItemsArtLayers = { id: string; name: string; code_type: string; code: number; on: number; off: number; default: string; change_type: string; fileitems_item_id: string }
export type ItemsArtLayersRequest = { id: string; name?: string | null; code_type?: string | null; code?: number | null; on?: number | null; off?: number | null; default?: string | null; change_type?: string | null; fileitems_item_id?: string | null }
export type ItemsArtListTap = { id: string; name: string; toggle: boolean; code_type: string; code: number; on: number; off: number; default: boolean; delay: number; change_type: string; ranges: string; art_layers: string; fileitems_item_id: string }
export type ItemsArtListTapRequest = { id: string; name?: string | null; toggle?: boolean | null; code_type?: string | null; code?: number | null; on?: number | null; off?: number | null; default?: boolean | null; delay?: number | null; change_type?: string | null; ranges?: string | null; art_layers?: string | null; fileitems_item_id?: string | null }
export type ItemsArtListTog = { id: string; name: string; toggle: boolean; code_type: string; code: number; on: number; off: number; default: string; delay: number; change_type: string; ranges: string; art_layers: string; fileitems_item_id: string }
export type ItemsArtListTogRequest = { id: string; name?: string | null; toggle?: boolean | null; code_type?: string | null; code?: number | null; on?: number | null; off?: number | null; default?: string | null; delay?: number | null; change_type?: string | null; ranges?: string | null; art_layers?: string | null; fileitems_item_id?: string | null }
export type ItemsFadList = { id: string; name: string; code_type: string; code: number; default: number; change_type: string; fileitems_item_id: string }
export type ItemsFadListRequest = { id: string; name?: string | null; code_type?: string | null; code?: number | null; default?: number | null; change_type?: string | null; fileitems_item_id?: string | null }
export type ItemsFullRanges = { id: string; name: string; low: string; high: string; white_keys_only: boolean; fileitems_item_id: string }
export type ItemsFullRangesRequest = { id: string; name?: string | null; low?: string | null; high?: string | null; white_keys_only?: boolean | null; fileitems_item_id?: string | null }
export type Settings = { vep_out_settings: number; smp_out_settings: number; default_range_count: number; default_art_tog_count: number; default_art_tap_count: number; default_fad_tog_count: number; track_add_count: number; sub_item_add_count: number; selected_item_id: string; selected_sub_item_id: string; previous_item_id?: string | null; next_item_id: string }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
